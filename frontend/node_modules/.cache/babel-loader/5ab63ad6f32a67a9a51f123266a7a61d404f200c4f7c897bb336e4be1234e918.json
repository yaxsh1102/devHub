{"ast":null,"code":"import { GET_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, actions) {\n  const {\n    type,\n    payload\n  } = actions;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: [...state.posts.filter(post => post.id !== payload.id), payload],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts.filter(post => post.id !== payload)],\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          post_comments: [payload, ...state.post.post_comments]\n        },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          post_comments: state.post.post_comments.filter(comment => comment.id !== payload)\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","actions","type","payload","filter","id","post_comments","comment"],"sources":["C:/Users/yashm/Desktop/devfront/src/reducers/post.js"],"sourcesContent":["import {\r\n  GET_POSTS,\r\n  GET_POST,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  post: null,\r\n  loading: true,\r\n  error: {}\r\n};\r\n\r\nexport default function(state = initialState, actions) {\r\n  const { type, payload } = actions;\r\n\r\n  switch (type) {\r\n    case GET_POSTS:\r\n      return { ...state, posts: payload, loading: false };\r\n    case GET_POST:\r\n      return { ...state, post: payload, loading: false };\r\n    case ADD_POST:\r\n      return { ...state, posts: [payload, ...state.posts], loading: false };\r\n    case POST_ERROR:\r\n      return { ...state, error: payload, loading: false };\r\n    case UPDATE_LIKES:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts.filter(post => post.id !== payload.id), payload],\r\n        loading: false\r\n      };\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts.filter(post => post.id !== payload)],\r\n        loading: false\r\n      };\r\n    case ADD_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: {\r\n          ...state.post,\r\n          post_comments: [payload, ...state.post.post_comments]\r\n        },\r\n        loading: false\r\n      };\r\n    case REMOVE_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: {\r\n          ...state.post,\r\n          post_comments: state.post.post_comments.filter(\r\n            comment => comment.id !== payload\r\n          )\r\n        },\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SACEA,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,cAAc,QACT,kBAAkB;AAEzB,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,CAAC;AACV,CAAC;AAED,eAAe,UAASC,KAAK,GAAGL,YAAY,EAAEM,OAAO,EAAE;EACrD,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGF,OAAO;EAEjC,QAAQC,IAAI;IACV,KAAKf,SAAS;MACZ,OAAO;QAAE,GAAGa,KAAK;QAAEJ,KAAK,EAAEO,OAAO;QAAEL,OAAO,EAAE;MAAM,CAAC;IACrD,KAAKV,QAAQ;MACX,OAAO;QAAE,GAAGY,KAAK;QAAEH,IAAI,EAAEM,OAAO;QAAEL,OAAO,EAAE;MAAM,CAAC;IACpD,KAAKN,QAAQ;MACX,OAAO;QAAE,GAAGQ,KAAK;QAAEJ,KAAK,EAAE,CAACO,OAAO,EAAE,GAAGH,KAAK,CAACJ,KAAK,CAAC;QAAEE,OAAO,EAAE;MAAM,CAAC;IACvE,KAAKT,UAAU;MACb,OAAO;QAAE,GAAGW,KAAK;QAAED,KAAK,EAAEI,OAAO;QAAEL,OAAO,EAAE;MAAM,CAAC;IACrD,KAAKR,YAAY;MACf,OAAO;QACL,GAAGU,KAAK;QACRJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAACP,IAAI,IAAIA,IAAI,CAACQ,EAAE,KAAKF,OAAO,CAACE,EAAE,CAAC,EAAEF,OAAO,CAAC;QACvEL,OAAO,EAAE;MACX,CAAC;IACH,KAAKP,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAACP,IAAI,IAAIA,IAAI,CAACQ,EAAE,KAAKF,OAAO,CAAC,CAAC;QAC3DL,OAAO,EAAE;MACX,CAAC;IACH,KAAKL,WAAW;MACd,OAAO;QACL,GAAGO,KAAK;QACRH,IAAI,EAAE;UACJ,GAAGG,KAAK,CAACH,IAAI;UACbS,aAAa,EAAE,CAACH,OAAO,EAAE,GAAGH,KAAK,CAACH,IAAI,CAACS,aAAa;QACtD,CAAC;QACDR,OAAO,EAAE;MACX,CAAC;IACH,KAAKJ,cAAc;MACjB,OAAO;QACL,GAAGM,KAAK;QACRH,IAAI,EAAE;UACJ,GAAGG,KAAK,CAACH,IAAI;UACbS,aAAa,EAAEN,KAAK,CAACH,IAAI,CAACS,aAAa,CAACF,MAAM,CAC5CG,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKF,OAC5B;QACF,CAAC;QACDL,OAAO,EAAE;MACX,CAAC;IACH;MACE,OAAOE,KAAK;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}