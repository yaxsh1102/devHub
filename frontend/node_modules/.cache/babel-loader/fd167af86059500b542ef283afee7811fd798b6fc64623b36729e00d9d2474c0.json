{"ast":null,"code":"import axios from \"axios\";\nimport toast from 'react-hot-toast';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"http://127.0.0.1:8000/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  try {\n    const res = await axios.post(\"http://127.0.0.1:8000/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data.token\n    });\n    dispatch(loadUser());\n    toast.success(\"Registration successful!\");\n  } catch (err) {\n    const errors = err.response.data;\n    if (errors[\"name\"]) {\n      errors[\"name\"].forEach(msg => toast.error(`Name: ${msg}`));\n    }\n    if (errors[\"email\"]) {\n      errors[\"email\"].forEach(msg => toast.error(`Email: ${msg}`));\n    }\n    if (errors[\"password\"]) {\n      errors[\"password\"].forEach(msg => toast.error(`Password: ${msg}`));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  try {\n    const res = await axios.post(\"http://127.0.0.1:8000/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data.token\n    });\n    dispatch(loadUser());\n    toast.success(\"Login successful!\");\n  } catch (err) {\n    const error = err.response.data.error;\n    toast.error(error);\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  toast.success(\"Logged out successfully.\");\n};","map":{"version":3,"names":["axios","toast","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","success","errors","response","forEach","msg","error","login","logout"],"sources":["C:/Users/yashm/Desktop/devfront/src/actions/auth.js"],"sourcesContent":["import axios from \"axios\";\r\nimport toast from 'react-hot-toast';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  CLEAR_PROFILE\r\n} from \"./types\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get(\"http://127.0.0.1:8000/api/auth\");\r\n    dispatch({ type: USER_LOADED, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n  const config = {\r\n    headers: { \"Content-Type\": \"application/json\" }\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\"http://127.0.0.1:8000/api/users\", body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data.token\r\n    });\r\n\r\n    dispatch(loadUser());\r\n    toast.success(\"Registration successful!\");\r\n  } catch (err) {\r\n    const errors = err.response.data;\r\n\r\n    if (errors[\"name\"]) {\r\n      errors[\"name\"].forEach(msg =>\r\n        toast.error(`Name: ${msg}`)\r\n      );\r\n    }\r\n\r\n    if (errors[\"email\"]) {\r\n      errors[\"email\"].forEach(msg =>\r\n        toast.error(`Email: ${msg}`)\r\n      );\r\n    }\r\n\r\n    if (errors[\"password\"]) {\r\n      errors[\"password\"].forEach(msg =>\r\n        toast.error(`Password: ${msg}`)\r\n      );\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: { \"Content-Type\": \"application/json\" }\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\"http://127.0.0.1:8000/api/auth\", body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data.token\r\n    });\r\n\r\n    dispatch(loadUser());\r\n    toast.success(\"Login successful!\");\r\n  } catch (err) {\r\n    const error = err.response.data.error;\r\n\r\n    toast.error(error);\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => dispatch => {\r\n  dispatch({ type: LOGOUT });\r\n  dispatch({ type: CLEAR_PROFILE });\r\n  toast.success(\"Logged out successfully.\");\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}